// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/rimvydascivilis/book-tracker/backend/domain"
	mock "github.com/stretchr/testify/mock"
)

// ProgressRepository is an autogenerated mock type for the ProgressRepository type
type ProgressRepository struct {
	mock.Mock
}

type ProgressRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ProgressRepository) EXPECT() *ProgressRepository_Expecter {
	return &ProgressRepository_Expecter{mock: &_m.Mock}
}

// CreateProgress provides a mock function with given fields: ctx, progress
func (_m *ProgressRepository) CreateProgress(ctx context.Context, progress domain.Progress) (domain.Progress, error) {
	ret := _m.Called(ctx, progress)

	if len(ret) == 0 {
		panic("no return value specified for CreateProgress")
	}

	var r0 domain.Progress
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Progress) (domain.Progress, error)); ok {
		return rf(ctx, progress)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Progress) domain.Progress); ok {
		r0 = rf(ctx, progress)
	} else {
		r0 = ret.Get(0).(domain.Progress)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Progress) error); ok {
		r1 = rf(ctx, progress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProgressRepository_CreateProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProgress'
type ProgressRepository_CreateProgress_Call struct {
	*mock.Call
}

// CreateProgress is a helper method to define mock.On call
//   - ctx context.Context
//   - progress domain.Progress
func (_e *ProgressRepository_Expecter) CreateProgress(ctx interface{}, progress interface{}) *ProgressRepository_CreateProgress_Call {
	return &ProgressRepository_CreateProgress_Call{Call: _e.mock.On("CreateProgress", ctx, progress)}
}

func (_c *ProgressRepository_CreateProgress_Call) Run(run func(ctx context.Context, progress domain.Progress)) *ProgressRepository_CreateProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Progress))
	})
	return _c
}

func (_c *ProgressRepository_CreateProgress_Call) Return(_a0 domain.Progress, _a1 error) *ProgressRepository_CreateProgress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProgressRepository_CreateProgress_Call) RunAndReturn(run func(context.Context, domain.Progress) (domain.Progress, error)) *ProgressRepository_CreateProgress_Call {
	_c.Call.Return(run)
	return _c
}

// GetTotalProgressByReadingID provides a mock function with given fields: ctx, readingID
func (_m *ProgressRepository) GetTotalProgressByReadingID(ctx context.Context, readingID int64) (int64, error) {
	ret := _m.Called(ctx, readingID)

	if len(ret) == 0 {
		panic("no return value specified for GetTotalProgressByReadingID")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (int64, error)); ok {
		return rf(ctx, readingID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) int64); ok {
		r0 = rf(ctx, readingID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, readingID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProgressRepository_GetTotalProgressByReadingID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTotalProgressByReadingID'
type ProgressRepository_GetTotalProgressByReadingID_Call struct {
	*mock.Call
}

// GetTotalProgressByReadingID is a helper method to define mock.On call
//   - ctx context.Context
//   - readingID int64
func (_e *ProgressRepository_Expecter) GetTotalProgressByReadingID(ctx interface{}, readingID interface{}) *ProgressRepository_GetTotalProgressByReadingID_Call {
	return &ProgressRepository_GetTotalProgressByReadingID_Call{Call: _e.mock.On("GetTotalProgressByReadingID", ctx, readingID)}
}

func (_c *ProgressRepository_GetTotalProgressByReadingID_Call) Run(run func(ctx context.Context, readingID int64)) *ProgressRepository_GetTotalProgressByReadingID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *ProgressRepository_GetTotalProgressByReadingID_Call) Return(_a0 int64, _a1 error) *ProgressRepository_GetTotalProgressByReadingID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProgressRepository_GetTotalProgressByReadingID_Call) RunAndReturn(run func(context.Context, int64) (int64, error)) *ProgressRepository_GetTotalProgressByReadingID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserReadingIDsByPeriod provides a mock function with given fields: ctx, userID, period
func (_m *ProgressRepository) GetUserReadingIDsByPeriod(ctx context.Context, userID int64, period string) ([]int64, error) {
	ret := _m.Called(ctx, userID, period)

	if len(ret) == 0 {
		panic("no return value specified for GetUserReadingIDsByPeriod")
	}

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) ([]int64, error)); ok {
		return rf(ctx, userID, period)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) []int64); ok {
		r0 = rf(ctx, userID, period)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, userID, period)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProgressRepository_GetUserReadingIDsByPeriod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserReadingIDsByPeriod'
type ProgressRepository_GetUserReadingIDsByPeriod_Call struct {
	*mock.Call
}

// GetUserReadingIDsByPeriod is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - period string
func (_e *ProgressRepository_Expecter) GetUserReadingIDsByPeriod(ctx interface{}, userID interface{}, period interface{}) *ProgressRepository_GetUserReadingIDsByPeriod_Call {
	return &ProgressRepository_GetUserReadingIDsByPeriod_Call{Call: _e.mock.On("GetUserReadingIDsByPeriod", ctx, userID, period)}
}

func (_c *ProgressRepository_GetUserReadingIDsByPeriod_Call) Run(run func(ctx context.Context, userID int64, period string)) *ProgressRepository_GetUserReadingIDsByPeriod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *ProgressRepository_GetUserReadingIDsByPeriod_Call) Return(_a0 []int64, _a1 error) *ProgressRepository_GetUserReadingIDsByPeriod_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProgressRepository_GetUserReadingIDsByPeriod_Call) RunAndReturn(run func(context.Context, int64, string) ([]int64, error)) *ProgressRepository_GetUserReadingIDsByPeriod_Call {
	_c.Call.Return(run)
	return _c
}

// NewProgressRepository creates a new instance of ProgressRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProgressRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProgressRepository {
	mock := &ProgressRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
