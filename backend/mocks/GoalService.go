// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/rimvydascivilis/book-tracker/backend/domain"
	dto "github.com/rimvydascivilis/book-tracker/backend/dto"

	mock "github.com/stretchr/testify/mock"
)

// GoalService is an autogenerated mock type for the GoalService type
type GoalService struct {
	mock.Mock
}

type GoalService_Expecter struct {
	mock *mock.Mock
}

func (_m *GoalService) EXPECT() *GoalService_Expecter {
	return &GoalService_Expecter{mock: &_m.Mock}
}

// GetGoal provides a mock function with given fields: ctx, userID
func (_m *GoalService) GetGoal(ctx context.Context, userID int64) (domain.Goal, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetGoal")
	}

	var r0 domain.Goal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (domain.Goal, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) domain.Goal); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(domain.Goal)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GoalService_GetGoal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGoal'
type GoalService_GetGoal_Call struct {
	*mock.Call
}

// GetGoal is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
func (_e *GoalService_Expecter) GetGoal(ctx interface{}, userID interface{}) *GoalService_GetGoal_Call {
	return &GoalService_GetGoal_Call{Call: _e.mock.On("GetGoal", ctx, userID)}
}

func (_c *GoalService_GetGoal_Call) Run(run func(ctx context.Context, userID int64)) *GoalService_GetGoal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *GoalService_GetGoal_Call) Return(_a0 domain.Goal, _a1 error) *GoalService_GetGoal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GoalService_GetGoal_Call) RunAndReturn(run func(context.Context, int64) (domain.Goal, error)) *GoalService_GetGoal_Call {
	_c.Call.Return(run)
	return _c
}

// GetGoalProgress provides a mock function with given fields: ctx, userID
func (_m *GoalService) GetGoalProgress(ctx context.Context, userID int64) (dto.GoalProgressResponse, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetGoalProgress")
	}

	var r0 dto.GoalProgressResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (dto.GoalProgressResponse, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) dto.GoalProgressResponse); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(dto.GoalProgressResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GoalService_GetGoalProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGoalProgress'
type GoalService_GetGoalProgress_Call struct {
	*mock.Call
}

// GetGoalProgress is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
func (_e *GoalService_Expecter) GetGoalProgress(ctx interface{}, userID interface{}) *GoalService_GetGoalProgress_Call {
	return &GoalService_GetGoalProgress_Call{Call: _e.mock.On("GetGoalProgress", ctx, userID)}
}

func (_c *GoalService_GetGoalProgress_Call) Run(run func(ctx context.Context, userID int64)) *GoalService_GetGoalProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *GoalService_GetGoalProgress_Call) Return(_a0 dto.GoalProgressResponse, _a1 error) *GoalService_GetGoalProgress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GoalService_GetGoalProgress_Call) RunAndReturn(run func(context.Context, int64) (dto.GoalProgressResponse, error)) *GoalService_GetGoalProgress_Call {
	_c.Call.Return(run)
	return _c
}

// SetGoal provides a mock function with given fields: ctx, userID, goal
func (_m *GoalService) SetGoal(ctx context.Context, userID int64, goal domain.Goal) (domain.Goal, error) {
	ret := _m.Called(ctx, userID, goal)

	if len(ret) == 0 {
		panic("no return value specified for SetGoal")
	}

	var r0 domain.Goal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, domain.Goal) (domain.Goal, error)); ok {
		return rf(ctx, userID, goal)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, domain.Goal) domain.Goal); ok {
		r0 = rf(ctx, userID, goal)
	} else {
		r0 = ret.Get(0).(domain.Goal)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, domain.Goal) error); ok {
		r1 = rf(ctx, userID, goal)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GoalService_SetGoal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetGoal'
type GoalService_SetGoal_Call struct {
	*mock.Call
}

// SetGoal is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - goal domain.Goal
func (_e *GoalService_Expecter) SetGoal(ctx interface{}, userID interface{}, goal interface{}) *GoalService_SetGoal_Call {
	return &GoalService_SetGoal_Call{Call: _e.mock.On("SetGoal", ctx, userID, goal)}
}

func (_c *GoalService_SetGoal_Call) Run(run func(ctx context.Context, userID int64, goal domain.Goal)) *GoalService_SetGoal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(domain.Goal))
	})
	return _c
}

func (_c *GoalService_SetGoal_Call) Return(_a0 domain.Goal, _a1 error) *GoalService_SetGoal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GoalService_SetGoal_Call) RunAndReturn(run func(context.Context, int64, domain.Goal) (domain.Goal, error)) *GoalService_SetGoal_Call {
	_c.Call.Return(run)
	return _c
}

// NewGoalService creates a new instance of GoalService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGoalService(t interface {
	mock.TestingT
	Cleanup(func())
}) *GoalService {
	mock := &GoalService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
