// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/rimvydascivilis/book-tracker/backend/domain"
	mock "github.com/stretchr/testify/mock"
)

// GoalRepository is an autogenerated mock type for the GoalRepository type
type GoalRepository struct {
	mock.Mock
}

type GoalRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *GoalRepository) EXPECT() *GoalRepository_Expecter {
	return &GoalRepository_Expecter{mock: &_m.Mock}
}

// CreateGoal provides a mock function with given fields: ctx, goal
func (_m *GoalRepository) CreateGoal(ctx context.Context, goal domain.Goal) (domain.Goal, error) {
	ret := _m.Called(ctx, goal)

	if len(ret) == 0 {
		panic("no return value specified for CreateGoal")
	}

	var r0 domain.Goal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Goal) (domain.Goal, error)); ok {
		return rf(ctx, goal)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Goal) domain.Goal); ok {
		r0 = rf(ctx, goal)
	} else {
		r0 = ret.Get(0).(domain.Goal)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Goal) error); ok {
		r1 = rf(ctx, goal)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GoalRepository_CreateGoal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGoal'
type GoalRepository_CreateGoal_Call struct {
	*mock.Call
}

// CreateGoal is a helper method to define mock.On call
//   - ctx context.Context
//   - goal domain.Goal
func (_e *GoalRepository_Expecter) CreateGoal(ctx interface{}, goal interface{}) *GoalRepository_CreateGoal_Call {
	return &GoalRepository_CreateGoal_Call{Call: _e.mock.On("CreateGoal", ctx, goal)}
}

func (_c *GoalRepository_CreateGoal_Call) Run(run func(ctx context.Context, goal domain.Goal)) *GoalRepository_CreateGoal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Goal))
	})
	return _c
}

func (_c *GoalRepository_CreateGoal_Call) Return(_a0 domain.Goal, _a1 error) *GoalRepository_CreateGoal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GoalRepository_CreateGoal_Call) RunAndReturn(run func(context.Context, domain.Goal) (domain.Goal, error)) *GoalRepository_CreateGoal_Call {
	_c.Call.Return(run)
	return _c
}

// GetGoalByUserID provides a mock function with given fields: ctx, userID
func (_m *GoalRepository) GetGoalByUserID(ctx context.Context, userID int64) (domain.Goal, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetGoalByUserID")
	}

	var r0 domain.Goal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (domain.Goal, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) domain.Goal); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(domain.Goal)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GoalRepository_GetGoalByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGoalByUserID'
type GoalRepository_GetGoalByUserID_Call struct {
	*mock.Call
}

// GetGoalByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
func (_e *GoalRepository_Expecter) GetGoalByUserID(ctx interface{}, userID interface{}) *GoalRepository_GetGoalByUserID_Call {
	return &GoalRepository_GetGoalByUserID_Call{Call: _e.mock.On("GetGoalByUserID", ctx, userID)}
}

func (_c *GoalRepository_GetGoalByUserID_Call) Run(run func(ctx context.Context, userID int64)) *GoalRepository_GetGoalByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *GoalRepository_GetGoalByUserID_Call) Return(_a0 domain.Goal, _a1 error) *GoalRepository_GetGoalByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GoalRepository_GetGoalByUserID_Call) RunAndReturn(run func(context.Context, int64) (domain.Goal, error)) *GoalRepository_GetGoalByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGoal provides a mock function with given fields: ctx, goal
func (_m *GoalRepository) UpdateGoal(ctx context.Context, goal domain.Goal) (domain.Goal, error) {
	ret := _m.Called(ctx, goal)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGoal")
	}

	var r0 domain.Goal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Goal) (domain.Goal, error)); ok {
		return rf(ctx, goal)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Goal) domain.Goal); ok {
		r0 = rf(ctx, goal)
	} else {
		r0 = ret.Get(0).(domain.Goal)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Goal) error); ok {
		r1 = rf(ctx, goal)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GoalRepository_UpdateGoal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGoal'
type GoalRepository_UpdateGoal_Call struct {
	*mock.Call
}

// UpdateGoal is a helper method to define mock.On call
//   - ctx context.Context
//   - goal domain.Goal
func (_e *GoalRepository_Expecter) UpdateGoal(ctx interface{}, goal interface{}) *GoalRepository_UpdateGoal_Call {
	return &GoalRepository_UpdateGoal_Call{Call: _e.mock.On("UpdateGoal", ctx, goal)}
}

func (_c *GoalRepository_UpdateGoal_Call) Run(run func(ctx context.Context, goal domain.Goal)) *GoalRepository_UpdateGoal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Goal))
	})
	return _c
}

func (_c *GoalRepository_UpdateGoal_Call) Return(_a0 domain.Goal, _a1 error) *GoalRepository_UpdateGoal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GoalRepository_UpdateGoal_Call) RunAndReturn(run func(context.Context, domain.Goal) (domain.Goal, error)) *GoalRepository_UpdateGoal_Call {
	_c.Call.Return(run)
	return _c
}

// NewGoalRepository creates a new instance of GoalRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGoalRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *GoalRepository {
	mock := &GoalRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
