// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/rimvydascivilis/book-tracker/backend/domain"
	dto "github.com/rimvydascivilis/book-tracker/backend/dto"

	mock "github.com/stretchr/testify/mock"
)

// ProgressService is an autogenerated mock type for the ProgressService type
type ProgressService struct {
	mock.Mock
}

type ProgressService_Expecter struct {
	mock *mock.Mock
}

func (_m *ProgressService) EXPECT() *ProgressService_Expecter {
	return &ProgressService_Expecter{mock: &_m.Mock}
}

// CreateProgress provides a mock function with given fields: ctx, readingID, progressReq
func (_m *ProgressService) CreateProgress(ctx context.Context, readingID int64, progressReq dto.ProgressRequest) (domain.Progress, error) {
	ret := _m.Called(ctx, readingID, progressReq)

	if len(ret) == 0 {
		panic("no return value specified for CreateProgress")
	}

	var r0 domain.Progress
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, dto.ProgressRequest) (domain.Progress, error)); ok {
		return rf(ctx, readingID, progressReq)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, dto.ProgressRequest) domain.Progress); ok {
		r0 = rf(ctx, readingID, progressReq)
	} else {
		r0 = ret.Get(0).(domain.Progress)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, dto.ProgressRequest) error); ok {
		r1 = rf(ctx, readingID, progressReq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProgressService_CreateProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProgress'
type ProgressService_CreateProgress_Call struct {
	*mock.Call
}

// CreateProgress is a helper method to define mock.On call
//   - ctx context.Context
//   - readingID int64
//   - progressReq dto.ProgressRequest
func (_e *ProgressService_Expecter) CreateProgress(ctx interface{}, readingID interface{}, progressReq interface{}) *ProgressService_CreateProgress_Call {
	return &ProgressService_CreateProgress_Call{Call: _e.mock.On("CreateProgress", ctx, readingID, progressReq)}
}

func (_c *ProgressService_CreateProgress_Call) Run(run func(ctx context.Context, readingID int64, progressReq dto.ProgressRequest)) *ProgressService_CreateProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(dto.ProgressRequest))
	})
	return _c
}

func (_c *ProgressService_CreateProgress_Call) Return(_a0 domain.Progress, _a1 error) *ProgressService_CreateProgress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProgressService_CreateProgress_Call) RunAndReturn(run func(context.Context, int64, dto.ProgressRequest) (domain.Progress, error)) *ProgressService_CreateProgress_Call {
	_c.Call.Return(run)
	return _c
}

// NewProgressService creates a new instance of ProgressService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProgressService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProgressService {
	mock := &ProgressService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
