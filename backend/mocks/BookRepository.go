// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/rimvydascivilis/book-tracker/backend/domain"
	mock "github.com/stretchr/testify/mock"
)

// BookRepository is an autogenerated mock type for the BookRepository type
type BookRepository struct {
	mock.Mock
}

type BookRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *BookRepository) EXPECT() *BookRepository_Expecter {
	return &BookRepository_Expecter{mock: &_m.Mock}
}

// CountBooksByUser provides a mock function with given fields: ctx, userID
func (_m *BookRepository) CountBooksByUser(ctx context.Context, userID int64) (int64, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for CountBooksByUser")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (int64, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) int64); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BookRepository_CountBooksByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountBooksByUser'
type BookRepository_CountBooksByUser_Call struct {
	*mock.Call
}

// CountBooksByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
func (_e *BookRepository_Expecter) CountBooksByUser(ctx interface{}, userID interface{}) *BookRepository_CountBooksByUser_Call {
	return &BookRepository_CountBooksByUser_Call{Call: _e.mock.On("CountBooksByUser", ctx, userID)}
}

func (_c *BookRepository_CountBooksByUser_Call) Run(run func(ctx context.Context, userID int64)) *BookRepository_CountBooksByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *BookRepository_CountBooksByUser_Call) Return(_a0 int64, _a1 error) *BookRepository_CountBooksByUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BookRepository_CountBooksByUser_Call) RunAndReturn(run func(context.Context, int64) (int64, error)) *BookRepository_CountBooksByUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBook provides a mock function with given fields: ctx, book
func (_m *BookRepository) CreateBook(ctx context.Context, book domain.Book) (domain.Book, error) {
	ret := _m.Called(ctx, book)

	if len(ret) == 0 {
		panic("no return value specified for CreateBook")
	}

	var r0 domain.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Book) (domain.Book, error)); ok {
		return rf(ctx, book)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Book) domain.Book); ok {
		r0 = rf(ctx, book)
	} else {
		r0 = ret.Get(0).(domain.Book)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Book) error); ok {
		r1 = rf(ctx, book)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BookRepository_CreateBook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBook'
type BookRepository_CreateBook_Call struct {
	*mock.Call
}

// CreateBook is a helper method to define mock.On call
//   - ctx context.Context
//   - book domain.Book
func (_e *BookRepository_Expecter) CreateBook(ctx interface{}, book interface{}) *BookRepository_CreateBook_Call {
	return &BookRepository_CreateBook_Call{Call: _e.mock.On("CreateBook", ctx, book)}
}

func (_c *BookRepository_CreateBook_Call) Run(run func(ctx context.Context, book domain.Book)) *BookRepository_CreateBook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Book))
	})
	return _c
}

func (_c *BookRepository_CreateBook_Call) Return(_a0 domain.Book, _a1 error) *BookRepository_CreateBook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BookRepository_CreateBook_Call) RunAndReturn(run func(context.Context, domain.Book) (domain.Book, error)) *BookRepository_CreateBook_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBook provides a mock function with given fields: ctx, userID, bookID
func (_m *BookRepository) DeleteBook(ctx context.Context, userID int64, bookID int64) error {
	ret := _m.Called(ctx, userID, bookID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, userID, bookID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BookRepository_DeleteBook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBook'
type BookRepository_DeleteBook_Call struct {
	*mock.Call
}

// DeleteBook is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - bookID int64
func (_e *BookRepository_Expecter) DeleteBook(ctx interface{}, userID interface{}, bookID interface{}) *BookRepository_DeleteBook_Call {
	return &BookRepository_DeleteBook_Call{Call: _e.mock.On("DeleteBook", ctx, userID, bookID)}
}

func (_c *BookRepository_DeleteBook_Call) Run(run func(ctx context.Context, userID int64, bookID int64)) *BookRepository_DeleteBook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *BookRepository_DeleteBook_Call) Return(_a0 error) *BookRepository_DeleteBook_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BookRepository_DeleteBook_Call) RunAndReturn(run func(context.Context, int64, int64) error) *BookRepository_DeleteBook_Call {
	_c.Call.Return(run)
	return _c
}

// GetBookByUserID provides a mock function with given fields: ctx, userID, bookID
func (_m *BookRepository) GetBookByUserID(ctx context.Context, userID int64, bookID int64) (domain.Book, error) {
	ret := _m.Called(ctx, userID, bookID)

	if len(ret) == 0 {
		panic("no return value specified for GetBookByUserID")
	}

	var r0 domain.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) (domain.Book, error)); ok {
		return rf(ctx, userID, bookID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) domain.Book); ok {
		r0 = rf(ctx, userID, bookID)
	} else {
		r0 = ret.Get(0).(domain.Book)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, userID, bookID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BookRepository_GetBookByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBookByUserID'
type BookRepository_GetBookByUserID_Call struct {
	*mock.Call
}

// GetBookByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - bookID int64
func (_e *BookRepository_Expecter) GetBookByUserID(ctx interface{}, userID interface{}, bookID interface{}) *BookRepository_GetBookByUserID_Call {
	return &BookRepository_GetBookByUserID_Call{Call: _e.mock.On("GetBookByUserID", ctx, userID, bookID)}
}

func (_c *BookRepository_GetBookByUserID_Call) Run(run func(ctx context.Context, userID int64, bookID int64)) *BookRepository_GetBookByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *BookRepository_GetBookByUserID_Call) Return(_a0 domain.Book, _a1 error) *BookRepository_GetBookByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BookRepository_GetBookByUserID_Call) RunAndReturn(run func(context.Context, int64, int64) (domain.Book, error)) *BookRepository_GetBookByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetBooksByUser provides a mock function with given fields: ctx, userID, offset, limit
func (_m *BookRepository) GetBooksByUser(ctx context.Context, userID int64, offset int64, limit int64) ([]domain.Book, error) {
	ret := _m.Called(ctx, userID, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetBooksByUser")
	}

	var r0 []domain.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int64) ([]domain.Book, error)); ok {
		return rf(ctx, userID, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int64) []domain.Book); ok {
		r0 = rf(ctx, userID, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, int64) error); ok {
		r1 = rf(ctx, userID, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BookRepository_GetBooksByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBooksByUser'
type BookRepository_GetBooksByUser_Call struct {
	*mock.Call
}

// GetBooksByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - offset int64
//   - limit int64
func (_e *BookRepository_Expecter) GetBooksByUser(ctx interface{}, userID interface{}, offset interface{}, limit interface{}) *BookRepository_GetBooksByUser_Call {
	return &BookRepository_GetBooksByUser_Call{Call: _e.mock.On("GetBooksByUser", ctx, userID, offset, limit)}
}

func (_c *BookRepository_GetBooksByUser_Call) Run(run func(ctx context.Context, userID int64, offset int64, limit int64)) *BookRepository_GetBooksByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *BookRepository_GetBooksByUser_Call) Return(_a0 []domain.Book, _a1 error) *BookRepository_GetBooksByUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BookRepository_GetBooksByUser_Call) RunAndReturn(run func(context.Context, int64, int64, int64) ([]domain.Book, error)) *BookRepository_GetBooksByUser_Call {
	_c.Call.Return(run)
	return _c
}

// SearchBooksByTitle provides a mock function with given fields: ctx, userID, title, limit
func (_m *BookRepository) SearchBooksByTitle(ctx context.Context, userID int64, title string, limit int64) ([]domain.Book, error) {
	ret := _m.Called(ctx, userID, title, limit)

	if len(ret) == 0 {
		panic("no return value specified for SearchBooksByTitle")
	}

	var r0 []domain.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, int64) ([]domain.Book, error)); ok {
		return rf(ctx, userID, title, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, int64) []domain.Book); ok {
		r0 = rf(ctx, userID, title, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string, int64) error); ok {
		r1 = rf(ctx, userID, title, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BookRepository_SearchBooksByTitle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchBooksByTitle'
type BookRepository_SearchBooksByTitle_Call struct {
	*mock.Call
}

// SearchBooksByTitle is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - title string
//   - limit int64
func (_e *BookRepository_Expecter) SearchBooksByTitle(ctx interface{}, userID interface{}, title interface{}, limit interface{}) *BookRepository_SearchBooksByTitle_Call {
	return &BookRepository_SearchBooksByTitle_Call{Call: _e.mock.On("SearchBooksByTitle", ctx, userID, title, limit)}
}

func (_c *BookRepository_SearchBooksByTitle_Call) Run(run func(ctx context.Context, userID int64, title string, limit int64)) *BookRepository_SearchBooksByTitle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string), args[3].(int64))
	})
	return _c
}

func (_c *BookRepository_SearchBooksByTitle_Call) Return(_a0 []domain.Book, _a1 error) *BookRepository_SearchBooksByTitle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BookRepository_SearchBooksByTitle_Call) RunAndReturn(run func(context.Context, int64, string, int64) ([]domain.Book, error)) *BookRepository_SearchBooksByTitle_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBook provides a mock function with given fields: ctx, book
func (_m *BookRepository) UpdateBook(ctx context.Context, book domain.Book) (domain.Book, error) {
	ret := _m.Called(ctx, book)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBook")
	}

	var r0 domain.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Book) (domain.Book, error)); ok {
		return rf(ctx, book)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Book) domain.Book); ok {
		r0 = rf(ctx, book)
	} else {
		r0 = ret.Get(0).(domain.Book)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Book) error); ok {
		r1 = rf(ctx, book)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BookRepository_UpdateBook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBook'
type BookRepository_UpdateBook_Call struct {
	*mock.Call
}

// UpdateBook is a helper method to define mock.On call
//   - ctx context.Context
//   - book domain.Book
func (_e *BookRepository_Expecter) UpdateBook(ctx interface{}, book interface{}) *BookRepository_UpdateBook_Call {
	return &BookRepository_UpdateBook_Call{Call: _e.mock.On("UpdateBook", ctx, book)}
}

func (_c *BookRepository_UpdateBook_Call) Run(run func(ctx context.Context, book domain.Book)) *BookRepository_UpdateBook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Book))
	})
	return _c
}

func (_c *BookRepository_UpdateBook_Call) Return(_a0 domain.Book, _a1 error) *BookRepository_UpdateBook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BookRepository_UpdateBook_Call) RunAndReturn(run func(context.Context, domain.Book) (domain.Book, error)) *BookRepository_UpdateBook_Call {
	_c.Call.Return(run)
	return _c
}

// NewBookRepository creates a new instance of BookRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBookRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BookRepository {
	mock := &BookRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
