// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/rimvydascivilis/book-tracker/backend/domain"
	mock "github.com/stretchr/testify/mock"
)

// ReadingRepository is an autogenerated mock type for the ReadingRepository type
type ReadingRepository struct {
	mock.Mock
}

type ReadingRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ReadingRepository) EXPECT() *ReadingRepository_Expecter {
	return &ReadingRepository_Expecter{mock: &_m.Mock}
}

// CountReadingsByUserID provides a mock function with given fields: ctx, userID
func (_m *ReadingRepository) CountReadingsByUserID(ctx context.Context, userID int64) (int64, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for CountReadingsByUserID")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (int64, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) int64); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadingRepository_CountReadingsByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountReadingsByUserID'
type ReadingRepository_CountReadingsByUserID_Call struct {
	*mock.Call
}

// CountReadingsByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
func (_e *ReadingRepository_Expecter) CountReadingsByUserID(ctx interface{}, userID interface{}) *ReadingRepository_CountReadingsByUserID_Call {
	return &ReadingRepository_CountReadingsByUserID_Call{Call: _e.mock.On("CountReadingsByUserID", ctx, userID)}
}

func (_c *ReadingRepository_CountReadingsByUserID_Call) Run(run func(ctx context.Context, userID int64)) *ReadingRepository_CountReadingsByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *ReadingRepository_CountReadingsByUserID_Call) Return(_a0 int64, _a1 error) *ReadingRepository_CountReadingsByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReadingRepository_CountReadingsByUserID_Call) RunAndReturn(run func(context.Context, int64) (int64, error)) *ReadingRepository_CountReadingsByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// CountReadingsByUserIDAndBookID provides a mock function with given fields: ctx, userID, bookID
func (_m *ReadingRepository) CountReadingsByUserIDAndBookID(ctx context.Context, userID int64, bookID int64) (int64, error) {
	ret := _m.Called(ctx, userID, bookID)

	if len(ret) == 0 {
		panic("no return value specified for CountReadingsByUserIDAndBookID")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) (int64, error)); ok {
		return rf(ctx, userID, bookID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) int64); ok {
		r0 = rf(ctx, userID, bookID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, userID, bookID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadingRepository_CountReadingsByUserIDAndBookID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountReadingsByUserIDAndBookID'
type ReadingRepository_CountReadingsByUserIDAndBookID_Call struct {
	*mock.Call
}

// CountReadingsByUserIDAndBookID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - bookID int64
func (_e *ReadingRepository_Expecter) CountReadingsByUserIDAndBookID(ctx interface{}, userID interface{}, bookID interface{}) *ReadingRepository_CountReadingsByUserIDAndBookID_Call {
	return &ReadingRepository_CountReadingsByUserIDAndBookID_Call{Call: _e.mock.On("CountReadingsByUserIDAndBookID", ctx, userID, bookID)}
}

func (_c *ReadingRepository_CountReadingsByUserIDAndBookID_Call) Run(run func(ctx context.Context, userID int64, bookID int64)) *ReadingRepository_CountReadingsByUserIDAndBookID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *ReadingRepository_CountReadingsByUserIDAndBookID_Call) Return(_a0 int64, _a1 error) *ReadingRepository_CountReadingsByUserIDAndBookID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReadingRepository_CountReadingsByUserIDAndBookID_Call) RunAndReturn(run func(context.Context, int64, int64) (int64, error)) *ReadingRepository_CountReadingsByUserIDAndBookID_Call {
	_c.Call.Return(run)
	return _c
}

// CreateReading provides a mock function with given fields: ctx, reading
func (_m *ReadingRepository) CreateReading(ctx context.Context, reading domain.Reading) (domain.Reading, error) {
	ret := _m.Called(ctx, reading)

	if len(ret) == 0 {
		panic("no return value specified for CreateReading")
	}

	var r0 domain.Reading
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Reading) (domain.Reading, error)); ok {
		return rf(ctx, reading)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Reading) domain.Reading); ok {
		r0 = rf(ctx, reading)
	} else {
		r0 = ret.Get(0).(domain.Reading)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Reading) error); ok {
		r1 = rf(ctx, reading)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadingRepository_CreateReading_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateReading'
type ReadingRepository_CreateReading_Call struct {
	*mock.Call
}

// CreateReading is a helper method to define mock.On call
//   - ctx context.Context
//   - reading domain.Reading
func (_e *ReadingRepository_Expecter) CreateReading(ctx interface{}, reading interface{}) *ReadingRepository_CreateReading_Call {
	return &ReadingRepository_CreateReading_Call{Call: _e.mock.On("CreateReading", ctx, reading)}
}

func (_c *ReadingRepository_CreateReading_Call) Run(run func(ctx context.Context, reading domain.Reading)) *ReadingRepository_CreateReading_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Reading))
	})
	return _c
}

func (_c *ReadingRepository_CreateReading_Call) Return(_a0 domain.Reading, _a1 error) *ReadingRepository_CreateReading_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReadingRepository_CreateReading_Call) RunAndReturn(run func(context.Context, domain.Reading) (domain.Reading, error)) *ReadingRepository_CreateReading_Call {
	_c.Call.Return(run)
	return _c
}

// GetReadingByID provides a mock function with given fields: ctx, id
func (_m *ReadingRepository) GetReadingByID(ctx context.Context, id int64) (domain.Reading, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetReadingByID")
	}

	var r0 domain.Reading
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (domain.Reading, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) domain.Reading); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Reading)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadingRepository_GetReadingByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReadingByID'
type ReadingRepository_GetReadingByID_Call struct {
	*mock.Call
}

// GetReadingByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *ReadingRepository_Expecter) GetReadingByID(ctx interface{}, id interface{}) *ReadingRepository_GetReadingByID_Call {
	return &ReadingRepository_GetReadingByID_Call{Call: _e.mock.On("GetReadingByID", ctx, id)}
}

func (_c *ReadingRepository_GetReadingByID_Call) Run(run func(ctx context.Context, id int64)) *ReadingRepository_GetReadingByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *ReadingRepository_GetReadingByID_Call) Return(_a0 domain.Reading, _a1 error) *ReadingRepository_GetReadingByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReadingRepository_GetReadingByID_Call) RunAndReturn(run func(context.Context, int64) (domain.Reading, error)) *ReadingRepository_GetReadingByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetReadingsByUserID provides a mock function with given fields: ctx, userID, offset, limit
func (_m *ReadingRepository) GetReadingsByUserID(ctx context.Context, userID int64, offset int64, limit int64) ([]domain.Reading, error) {
	ret := _m.Called(ctx, userID, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetReadingsByUserID")
	}

	var r0 []domain.Reading
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int64) ([]domain.Reading, error)); ok {
		return rf(ctx, userID, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int64) []domain.Reading); ok {
		r0 = rf(ctx, userID, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Reading)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, int64) error); ok {
		r1 = rf(ctx, userID, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadingRepository_GetReadingsByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReadingsByUserID'
type ReadingRepository_GetReadingsByUserID_Call struct {
	*mock.Call
}

// GetReadingsByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - offset int64
//   - limit int64
func (_e *ReadingRepository_Expecter) GetReadingsByUserID(ctx interface{}, userID interface{}, offset interface{}, limit interface{}) *ReadingRepository_GetReadingsByUserID_Call {
	return &ReadingRepository_GetReadingsByUserID_Call{Call: _e.mock.On("GetReadingsByUserID", ctx, userID, offset, limit)}
}

func (_c *ReadingRepository_GetReadingsByUserID_Call) Run(run func(ctx context.Context, userID int64, offset int64, limit int64)) *ReadingRepository_GetReadingsByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *ReadingRepository_GetReadingsByUserID_Call) Return(_a0 []domain.Reading, _a1 error) *ReadingRepository_GetReadingsByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReadingRepository_GetReadingsByUserID_Call) RunAndReturn(run func(context.Context, int64, int64, int64) ([]domain.Reading, error)) *ReadingRepository_GetReadingsByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// NewReadingRepository creates a new instance of ReadingRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReadingRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReadingRepository {
	mock := &ReadingRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
