// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/rimvydascivilis/book-tracker/backend/domain"
	dto "github.com/rimvydascivilis/book-tracker/backend/dto"

	mock "github.com/stretchr/testify/mock"
)

// ReadingService is an autogenerated mock type for the ReadingService type
type ReadingService struct {
	mock.Mock
}

type ReadingService_Expecter struct {
	mock *mock.Mock
}

func (_m *ReadingService) EXPECT() *ReadingService_Expecter {
	return &ReadingService_Expecter{mock: &_m.Mock}
}

// CreateReading provides a mock function with given fields: ctx, userID, reading
func (_m *ReadingService) CreateReading(ctx context.Context, userID int64, reading domain.Reading) (domain.Reading, error) {
	ret := _m.Called(ctx, userID, reading)

	if len(ret) == 0 {
		panic("no return value specified for CreateReading")
	}

	var r0 domain.Reading
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, domain.Reading) (domain.Reading, error)); ok {
		return rf(ctx, userID, reading)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, domain.Reading) domain.Reading); ok {
		r0 = rf(ctx, userID, reading)
	} else {
		r0 = ret.Get(0).(domain.Reading)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, domain.Reading) error); ok {
		r1 = rf(ctx, userID, reading)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadingService_CreateReading_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateReading'
type ReadingService_CreateReading_Call struct {
	*mock.Call
}

// CreateReading is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - reading domain.Reading
func (_e *ReadingService_Expecter) CreateReading(ctx interface{}, userID interface{}, reading interface{}) *ReadingService_CreateReading_Call {
	return &ReadingService_CreateReading_Call{Call: _e.mock.On("CreateReading", ctx, userID, reading)}
}

func (_c *ReadingService_CreateReading_Call) Run(run func(ctx context.Context, userID int64, reading domain.Reading)) *ReadingService_CreateReading_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(domain.Reading))
	})
	return _c
}

func (_c *ReadingService_CreateReading_Call) Return(_a0 domain.Reading, _a1 error) *ReadingService_CreateReading_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReadingService_CreateReading_Call) RunAndReturn(run func(context.Context, int64, domain.Reading) (domain.Reading, error)) *ReadingService_CreateReading_Call {
	_c.Call.Return(run)
	return _c
}

// GetReadings provides a mock function with given fields: ctx, userID, page, limit
func (_m *ReadingService) GetReadings(ctx context.Context, userID int64, page int64, limit int64) ([]dto.ReadingResponse, bool, error) {
	ret := _m.Called(ctx, userID, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetReadings")
	}

	var r0 []dto.ReadingResponse
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int64) ([]dto.ReadingResponse, bool, error)); ok {
		return rf(ctx, userID, page, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int64) []dto.ReadingResponse); ok {
		r0 = rf(ctx, userID, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.ReadingResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, int64) bool); ok {
		r1 = rf(ctx, userID, page, limit)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int64, int64, int64) error); ok {
		r2 = rf(ctx, userID, page, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ReadingService_GetReadings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReadings'
type ReadingService_GetReadings_Call struct {
	*mock.Call
}

// GetReadings is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - page int64
//   - limit int64
func (_e *ReadingService_Expecter) GetReadings(ctx interface{}, userID interface{}, page interface{}, limit interface{}) *ReadingService_GetReadings_Call {
	return &ReadingService_GetReadings_Call{Call: _e.mock.On("GetReadings", ctx, userID, page, limit)}
}

func (_c *ReadingService_GetReadings_Call) Run(run func(ctx context.Context, userID int64, page int64, limit int64)) *ReadingService_GetReadings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *ReadingService_GetReadings_Call) Return(_a0 []dto.ReadingResponse, _a1 bool, _a2 error) *ReadingService_GetReadings_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ReadingService_GetReadings_Call) RunAndReturn(run func(context.Context, int64, int64, int64) ([]dto.ReadingResponse, bool, error)) *ReadingService_GetReadings_Call {
	_c.Call.Return(run)
	return _c
}

// NewReadingService creates a new instance of ReadingService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReadingService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReadingService {
	mock := &ReadingService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
